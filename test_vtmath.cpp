// ECE 3574, Project 4, Fall 2019 - starter code for Catch2 unit tests of VTmath
//
#define CATCH_CONFIG_MAIN  // Tells Catch to provide a main() function
#include "catch.hpp"
#include "VTmath.h"


TEST_CASE( "Test constructors", "[VTmath]" ) {
    std::cout << "Test constructors\n";

	VTmath m;

	REQUIRE(m.size() == 1);
	REQUIRE(m == "0");
	REQUIRE(m == 0);

  VTmath n(m);

  REQUIRE(n.size() == 1);
  REQUIRE(n == "0");
  REQUIRE(n == 0);
}

TEST_CASE( "Test assignment operators", "[VTmath]" ) {
  std::cout << "Test assignment operators\n";

  VTmath m, n;

  m = 0;
  n = 0;

  REQUIRE(m == 0);
  REQUIRE(m == "0");
  REQUIRE(m == n);

  m = "0";
  n = "0";

  REQUIRE(m == 0);
  REQUIRE(m == "0");
  REQUIRE(m == n);

  m = 5;
  n = 5;

  REQUIRE(m == 5);
  REQUIRE(m == "5");
  REQUIRE(m == n);

  m = -5;
  n = -5;

  REQUIRE(m == -5);
  REQUIRE(m == "-5");
  REQUIRE(m == n);

  m = "23452";
  n = "23452";
  REQUIRE(m == 23452);
  REQUIRE(m == "23452");
  REQUIRE(m == n);

  m = "-23452";
  n = "-23452";
  REQUIRE(m == -23452);
  REQUIRE(m == "-23452");
  REQUIRE(m == n);

  m = "2352362362362362362362362362362362362";
  n = "2352362362362362362362362362362362362";
  REQUIRE(m == "2352362362362362362362362362362362362");
  REQUIRE(n == "2352362362362362362362362362362362362");
  REQUIRE(m == n);

  m = "-2352362362362362362362362362362362362";
  n = "-2352362362362362362362362362362362362";
  REQUIRE(m == "-2352362362362362362362362362362362362");
  REQUIRE(n == "-2352362362362362362362362362362362362");
  REQUIRE(m == n);

  m = "-0002352362362362362362362362362362362362";
  n = "-00000002352362362362362362362362362362362362";
  REQUIRE(m == "-2352362362362362362362362362362362362");
  REQUIRE(n == "-2352362362362362362362362362362362362");
  REQUIRE(m == n);
}

/*TEST_CASE ( "Test greater than operator", "[VTmath]") {
  std::cout << "Testing greater than\n";

  VTmath m, n;
  bool r;

  m = 2;
	n = 3;
	r = m > n;
	REQUIRE(m == 2);
	REQUIRE(n == 3);
	REQUIRE(!r);

  m = 3;
  n = 2;
  r = m > n;
  REQUIRE(m == 3);
  REQUIRE(n == 2);
  REQUIRE(r);

  m = 120;
  n = 6023;
  r = m > n;
  REQUIRE(m == 120);
  REQUIRE(n == 6023);
  REQUIRE(!r);

  m = 6023;
  n = 120;
  r = m > n;
  REQUIRE(m == 6023);
  REQUIRE(n == 120);
  REQUIRE(r);

  m = -2;
  n = 5;
  r = m > n;
  REQUIRE(m == -2);
  REQUIRE(n == 5);
  REQUIRE(!r);

  m = 5;
  n = -2;
  r = m > n;
  REQUIRE(m == 5);
  REQUIRE(n == -2);
  REQUIRE(r);

  m = -6023;
  n = 120;
  r = m > n;
  REQUIRE(m == -6023);
  REQUIRE(n == 120);
  REQUIRE(!r);

  m = 120;
  n = -6023;
  r = m > n;
  REQUIRE(m == 120);
  REQUIRE(n == -6023);
  REQUIRE(r);

  m = 6023;
  n = -120;
  r = m > n;
  REQUIRE(m == 6023);
  REQUIRE(n == -120);
  REQUIRE(r);

  m = -120;
  n = 6023;
  r = m > n;
  REQUIRE(m == -120);
  REQUIRE(n == 6023);
  REQUIRE(!r);

  m = -120;
  n = -6023;
  r = m > n;
  REQUIRE(m == -120);
  REQUIRE(n == -6023);
  REQUIRE(r);

  m = -6023;
  n = -120;
  r = m > n;
  REQUIRE(m == -6023);
  REQUIRE(n == -120);
  REQUIRE(!r);

  m = "13623624724727362372472347234135";
  n = "352672372231251361362612";
  r = m > n;
  REQUIRE(m == "13623624724727362372472347234135");
  REQUIRE(n == "352672372231251361362612");
  REQUIRE(r);

  m = "352672372231251361362612";
  n = "13623624724727362372472347234135";
  r = m > n;
  REQUIRE(m == "352672372231251361362612");
  REQUIRE(n == "13623624724727362372472347234135");
  REQUIRE(!r);

  m = "-13623624724727362372472347234135";
  n = "352672372231251361362612";
  r = m > n;
  REQUIRE(m == "-13623624724727362372472347234135");
  REQUIRE(n == "352672372231251361362612");
  REQUIRE(!r);

  m = "352672372231251361362612";
  n = "-13623624724727362372472347234135";
  r = m > n;
  REQUIRE(m == "352672372231251361362612");
  REQUIRE(n == "-13623624724727362372472347234135");
  REQUIRE(r);

  m = "-13623624724727362372472347234135";
  n = "-352672372231251361362612";
  r = m > n;
  REQUIRE(m == "-13623624724727362372472347234135");
  REQUIRE(n == "-352672372231251361362612");
  REQUIRE(!r);

  m = "-352672372231251361362612";
  n = "-13623624724727362372472347234135";
  r = m > n;
  REQUIRE(m == "-352672372231251361362612");
  REQUIRE(n == "-13623624724727362372472347234135");
  REQUIRE(r);
}*/

std::string grabOutput(VTmath &m) {
  std::stringstream buffer;
  std::string output;
  std::streambuf * old = std::cout.rdbuf(buffer.rdbuf());

  std::cout << m << std::endl;

  output = buffer.str();
  std::cout.rdbuf(old);

  return output;
}

TEST_CASE( "Test pipe operator", "[VTmath]" ) {
  std::cout << "Test pipe operator\n";

  VTmath m;

  REQUIRE(grabOutput(m) == "0\n");

  m = 124;

  REQUIRE(grabOutput(m) == "124\n");

  m = -124;

  REQUIRE(grabOutput(m) == "-124\n");

  m = "75421";

  REQUIRE(grabOutput(m) == "75421\n");

  m = "-75421";

  REQUIRE(grabOutput(m) == "-75421\n");

  m = "2352362362362362362362362362362362362";

  REQUIRE(grabOutput(m) == "2352362362362362362362362362362362362\n");

  m = "-2352362362362362362362362362362362362";

  REQUIRE(grabOutput(m) == "-2352362362362362362362362362362362362\n");

  m = "00000002352362362362362362362362362362362362";

  REQUIRE(grabOutput(m) == "2352362362362362362362362362362362362\n");

  m = "-000000000000002352362362362362362362362362362362362";

  REQUIRE(grabOutput(m) == "-2352362362362362362362362362362362362\n");
}

TEST_CASE( "Test addition", "[VTmath]" ) {
    std::cout << "Test addition\n";

	VTmath m, n, r;

	m = 2;
	n = 3;
	r = m + n;
	REQUIRE(m == 2);
	REQUIRE(n == 3);
	REQUIRE(r == 5);

  m = 3;
  n = 2;
  r = m + n;
  REQUIRE(m == 3);
  REQUIRE(n == 2);
  REQUIRE(r == 5);

  m = 120;
  n = 6023;
  r = m + n;
  REQUIRE(m == 120);
  REQUIRE(n == 6023);
  REQUIRE(r == 6143);

  m = 6023;
  n = 120;
  r = m + n;
  REQUIRE(m == 6023);
  REQUIRE(n == 120);
  REQUIRE(r == 6143);

  m = -2;
  n = 5;
  r = m + n;
  REQUIRE(m == -2);
  REQUIRE(n == 5);
  REQUIRE(r == 3);

  m = 5;
  n = -2;
  r = m + n;
  REQUIRE(m == 5);
  REQUIRE(n == -2);
  REQUIRE(r == 3);

  m = -6023;
  n = 120;
  r = m + n;
  REQUIRE(m == -6023);
  REQUIRE(n == 120);
  REQUIRE(r == -5903);

  m = 120;
  n = -6023;
  r = m + n;
  REQUIRE(m == 120);
  REQUIRE(n == -6023);
  REQUIRE(r == -5903);

  m = 6023;
  n = -120;
  r = m + n;
  REQUIRE(m == 6023);
  REQUIRE(n == -120);
  REQUIRE(r == 5903);

  m = -120;
  n = 6023;
  r = m + n;
  REQUIRE(m == -120);
  REQUIRE(n == 6023);
  REQUIRE(r == 5903);

  m = -120;
  n = -6023;
  r = m + n;
  REQUIRE(m == -120);
  REQUIRE(n == -6023);
  REQUIRE(r == -6143);

  m = -6023;
  n = -120;
  r = m + n;
  REQUIRE(m == -6023);
  REQUIRE(n == -120);
  REQUIRE(r == -6143);

  m = "13623624724727362372472347234135";
  n = "352672372231251361362612";
  r = m + n;
  REQUIRE(m == "13623624724727362372472347234135");
  REQUIRE(n == "352672372231251361362612");
  REQUIRE(r == "13623625077399734603723708596747");

  m = "352672372231251361362612";
  n = "13623624724727362372472347234135";
  r = m + n;
  REQUIRE(m == "352672372231251361362612");
  REQUIRE(n == "13623624724727362372472347234135");
  REQUIRE(r == "13623625077399734603723708596747");

  m = "-13623624724727362372472347234135";
  n = "352672372231251361362612";
  r = m + n;
  REQUIRE(m == "-13623624724727362372472347234135");
  REQUIRE(n == "352672372231251361362612");
  REQUIRE(r == "-13623624372054990141220985871523");

  m = "352672372231251361362612";
  n = "-13623624724727362372472347234135";
  r = m + n;
  REQUIRE(m == "352672372231251361362612");
  REQUIRE(n == "-13623624724727362372472347234135");
  REQUIRE(r == "-13623624372054990141220985871523");

  m = "-13623624724727362372472347234135";
  n = "-352672372231251361362612";
  r = m + n;
  REQUIRE(m == "-13623624724727362372472347234135");
  REQUIRE(n == "-352672372231251361362612");
  REQUIRE(r == "-13623625077399734603723708596747");

  m = "-352672372231251361362612";
  n = "-13623624724727362372472347234135";
  r = m + n;
  REQUIRE(m == "-352672372231251361362612");
  REQUIRE(n == "-13623624724727362372472347234135");
  REQUIRE(r == "-13623625077399734603723708596747");
}

TEST_CASE( "Test subtraction", "[VTmath]" ) {
    std::cout << "Test subtraction\n";

	VTmath m, n, r;

  m = 3;
  n = 3;
  r = m - n;
  REQUIRE(r == 0);

	m = 2;
	n = 3;
	r = m - n;
	REQUIRE(m == 2);
	REQUIRE(n == 3);
	REQUIRE(r == -1);

  m = 3;
  n = 2;
  r = m - n;
  REQUIRE(m == 3);
  REQUIRE(n == 2);
  REQUIRE(r == 1);

  m = 120;
  n = 6023;
  r = m - n;
  REQUIRE(m == 120);
  REQUIRE(n == 6023);
  REQUIRE(r == -5903);

  m = 6023;
  n = 120;
  r = m - n;
  REQUIRE(m == 6023);
  REQUIRE(n == 120);
  REQUIRE(r == 5903);

  m = -2;
  n = 5;
  r = m - n;
  REQUIRE(m == -2);
  REQUIRE(n == 5);
  REQUIRE(r == -7);

  m = 5;
  n = -2;
  r = m - n;
  REQUIRE(m == 5);
  REQUIRE(n == -2);
  REQUIRE(r == 7);

  m = -6023;
  n = 120;
  r = m - n;
  REQUIRE(m == -6023);
  REQUIRE(n == 120);
  REQUIRE(r == -6143);

  m = 120;
  n = -6023;
  r = m - n;
  REQUIRE(m == 120);
  REQUIRE(n == -6023);
  REQUIRE(r == 6143);

  m = 6023;
  n = -120;
  r = m - n;
  REQUIRE(m == 6023);
  REQUIRE(n == -120);
  REQUIRE(r == 6143);

  m = -120;
  n = 6023;
  r = m - n;
  REQUIRE(m == -120);
  REQUIRE(n == 6023);
  REQUIRE(r == -6143);

  m = -120;
  n = -6023;
  r = m - n;
  REQUIRE(m == -120);
  REQUIRE(n == -6023);
  REQUIRE(r == 5903);

  m = -6023;
  n = -120;
  r = m - n;
  REQUIRE(m == -6023);
  REQUIRE(n == -120);
  REQUIRE(r == -5903);

  m = "13623624724727362372472347234135";
  n = "352672372231251361362612";
  r = m - n;
  REQUIRE(m == "13623624724727362372472347234135");
  REQUIRE(n == "352672372231251361362612");
  REQUIRE(r == "13623624372054990141220985871523");

  m = "352672372231251361362612";
  n = "13623624724727362372472347234135";
  r = m - n;
  REQUIRE(m == "352672372231251361362612");
  REQUIRE(n == "13623624724727362372472347234135");
  REQUIRE(r == "-13623624372054990141220985871523");

  m = "-13623624724727362372472347234135";
  n = "352672372231251361362612";
  r = m - n;
  REQUIRE(m == "-13623624724727362372472347234135");
  REQUIRE(n == "352672372231251361362612");
  REQUIRE(r == "-13623625077399734603723708596747");

  m = "352672372231251361362612";
  n = "-13623624724727362372472347234135";
  r = m - n;
  REQUIRE(m == "352672372231251361362612");
  REQUIRE(n == "-13623624724727362372472347234135");
  REQUIRE(r == "13623625077399734603723708596747");

  m = "-13623624724727362372472347234135";
  n = "-352672372231251361362612";
  r = m - n;
  REQUIRE(m == "-13623624724727362372472347234135");
  REQUIRE(n == "-352672372231251361362612");
  REQUIRE(r == "-13623624372054990141220985871523");

  m = "-352672372231251361362612";
  n = "-13623624724727362372472347234135";
  r = m - n;
  REQUIRE(m == "-352672372231251361362612");
  REQUIRE(n == "-13623624724727362372472347234135");
  REQUIRE(r == "13623624372054990141220985871523");
}

TEST_CASE( "Test multiplication", "[VTmath]" ) {
    std::cout << "Test multiplication\n";

	VTmath m, n, r;

	m = 2;
	n = 3;
	r = m * n;
	REQUIRE(m == 2);
	REQUIRE(n == 3);
	REQUIRE(r == 6);

  m = 3;
  n = 2;
  r = m * n;
  REQUIRE(m == 3);
  REQUIRE(n == 2);
  REQUIRE(r == 6);

  m = 120;
  n = 6023;
  r = m * n;
  REQUIRE(m == 120);
  REQUIRE(n == 6023);
  REQUIRE(r == 722760);

  m = 6023;
  n = 120;
  r = m * n;
  REQUIRE(m == 6023);
  REQUIRE(n == 120);
  REQUIRE(r == 722760);

  m = -2;
  n = 5;
  r = m * n;
  REQUIRE(m == -2);
  REQUIRE(n == 5);
  REQUIRE(r == -10);

  m = 5;
  n = -2;
  r = m * n;
  REQUIRE(m == 5);
  REQUIRE(n == -2);
  REQUIRE(r == -10);

  m = -6023;
  n = 120;
  r = m * n;
  REQUIRE(m == -6023);
  REQUIRE(n == 120);
  REQUIRE(r == -722760);

  m = 120;
  n = -6023;
  r = m * n;
  REQUIRE(m == 120);
  REQUIRE(n == -6023);
  REQUIRE(r == -722760);

  m = 6023;
  n = -120;
  r = m * n;
  REQUIRE(m == 6023);
  REQUIRE(n == -120);
  REQUIRE(r == -722760);

  m = -120;
  n = 6023;
  r = m * n;
  REQUIRE(m == -120);
  REQUIRE(n == 6023);
  REQUIRE(r == -722760);

  m = -120;
  n = -6023;
  r = m * n;
  REQUIRE(m == -120);
  REQUIRE(n == -6023);
  REQUIRE(r == 722760);

  m = -6023;
  n = -120;
  r = m * n;
  REQUIRE(m == -6023);
  REQUIRE(n == -120);
  REQUIRE(r == 722760);

  m = 9494;
  n = 33;
  r = m * n;
  REQUIRE(m == 9494);
  REQUIRE(n == 33);
  REQUIRE(r == 313302);

  m = "13623624724727362372472347234135";
  n = "352672372231251361362612";
  r = m * n;
  REQUIRE(m == "13623624724727362372472347234135");
  REQUIRE(n == "352672372231251361362612");
  REQUIRE(r == "4804676050057927705489912914727287375585247182999160620");

  m = "352672372231251361362612";
  n = "13623624724727362372472347234135";
  r = m * n;
  REQUIRE(m == "352672372231251361362612");
  REQUIRE(n == "13623624724727362372472347234135");
  REQUIRE(r == "4804676050057927705489912914727287375585247182999160620");

  m = "-13623624724727362372472347234135";
  n = "352672372231251361362612";
  r = m * n;
  REQUIRE(m == "-13623624724727362372472347234135");
  REQUIRE(n == "352672372231251361362612");
  REQUIRE(r == "-4804676050057927705489912914727287375585247182999160620");

  m = "352672372231251361362612";
  n = "-13623624724727362372472347234135";
  r = m * n;
  REQUIRE(m == "352672372231251361362612");
  REQUIRE(n == "-13623624724727362372472347234135");
  REQUIRE(r == "-4804676050057927705489912914727287375585247182999160620");

  m = "-13623624724727362372472347234135";
  n = "-352672372231251361362612";
  r = m * n;
  REQUIRE(m == "-13623624724727362372472347234135");
  REQUIRE(n == "-352672372231251361362612");
  REQUIRE(r == "4804676050057927705489912914727287375585247182999160620");

  m = "-352672372231251361362612";
  n = "-13623624724727362372472347234135";
  r = m * n;
  REQUIRE(m == "-352672372231251361362612");
  REQUIRE(n == "-13623624724727362372472347234135");
  REQUIRE(r == "4804676050057927705489912914727287375585247182999160620");

  m = "999999999999999999999999999999999999999999999999999";
  n = "999999999999999999999999999999999999999999999999999";
  r = m * n;
  REQUIRE(m == "999999999999999999999999999999999999999999999999999");
  REQUIRE(n == "999999999999999999999999999999999999999999999999999");
  REQUIRE(r == "999999999999999999999999999999999999999999999999998000000000000000000000000000000000000000000000000001");
}

TEST_CASE( "Test division", "[VTmath]" ) {
    std::cout << "Test division\n";

	VTmath m, n, r;

  /*m = 760;
  n = 152;
  r = m / n;
  REQUIRE(m == 760);
  REQUIRE(n == 152);
  REQUIRE(r == 5);

	m = 2;
	n = 6;
	r = m / n;
	REQUIRE(m == 2);
	REQUIRE(n == 6);
	REQUIRE(r == 0);

  m = 6;
  n = 2;
  r = m / n;
  REQUIRE(m == 6);
  REQUIRE(n == 2);
  REQUIRE(r == 3);

  m = 120;
  n = 6023;
  r = m / n;
  REQUIRE(m == 120);
  REQUIRE(n == 6023);
  REQUIRE(r == 0);

  m = 6023;
  n = 120;
  r = m / n;
  REQUIRE(m == 6023);
  REQUIRE(n == 120);
  REQUIRE(r == 50);

  m = -2;
  n = 5;
  r = m / n;
  REQUIRE(m == -2);
  REQUIRE(n == 5);
  REQUIRE(r == 0);

  m = 5;
  n = -2;
  r = m / n;
  REQUIRE(m == 5);
  REQUIRE(n == -2);
  REQUIRE(r == -2);

  m = -6023;
  n = 120;
  r = m / n;
  REQUIRE(m == -6023);
  REQUIRE(n == 120);
  REQUIRE(r == -50);

  m = 120;
  n = -6023;
  r = m / n;
  REQUIRE(m == 120);
  REQUIRE(n == -6023);
  REQUIRE(r == 0);

  m = 6023;
  n = -120;
  r = m / n;
  REQUIRE(m == 6023);
  REQUIRE(n == -120);
  REQUIRE(r == -50);

  m = -120;
  n = 6023;
  r = m / n;
  REQUIRE(m == -120);
  REQUIRE(n == 6023);
  REQUIRE(r == 0);

  m = -120;
  n = -6023;
  r = m / n;
  REQUIRE(m == -120);
  REQUIRE(n == -6023);
  REQUIRE(r == 0);

  m = -6023;
  n = -120;
  r = m / n;
  REQUIRE(m == -6023);
  REQUIRE(n == -120);
  REQUIRE(r == 50);

  m = 9494;
  n = 33;
  r = m / n;
  REQUIRE(m == 9494);
  REQUIRE(n == 33);
  REQUIRE(r == 287);

  m = "13623624724727362372472347234135";
  n = "352672372231251361362612";
  r = m / n;
  REQUIRE(m == "13623624724727362372472347234135");
  REQUIRE(n == "352672372231251361362612");
  REQUIRE(r == "38629690");

  m = "352672372231251361362612";
  n = "13623624724727362372472347234135";
  r = m / n;
  REQUIRE(m == "352672372231251361362612");
  REQUIRE(n == "13623624724727362372472347234135");
  REQUIRE(r == "4804676050057927705489912914727287375585247182999160620");

  m = "-13623624724727362372472347234135";
  n = "352672372231251361362612";
  r = m / n;
  REQUIRE(m == "-13623624724727362372472347234135");
  REQUIRE(n == "352672372231251361362612");
  REQUIRE(r == "-4804676050057927705489912914727287375585247182999160620");

  m = "352672372231251361362612";
  n = "-13623624724727362372472347234135";
  r = m / n;
  REQUIRE(m == "352672372231251361362612");
  REQUIRE(n == "-13623624724727362372472347234135");
  REQUIRE(r == "-4804676050057927705489912914727287375585247182999160620");

  m = "-13623624724727362372472347234135";
  n = "-352672372231251361362612";
  r = m / n;
  REQUIRE(m == "-13623624724727362372472347234135");
  REQUIRE(n == "-352672372231251361362612");
  REQUIRE(r == "4804676050057927705489912914727287375585247182999160620");

  m = "-352672372231251361362612";
  n = "-13623624724727362372472347234135";
  r = m / n;
  REQUIRE(m == "-352672372231251361362612");
  REQUIRE(n == "-13623624724727362372472347234135");
  REQUIRE(r == "4804676050057927705489912914727287375585247182999160620");

  m = "999999999999999999999999999999999999999999999999999";
  n = "999999999999999999999999999999999999999999999999999";
  r = m / n;
  REQUIRE(m == "999999999999999999999999999999999999999999999999999");
  REQUIRE(n == "999999999999999999999999999999999999999999999999999");
  REQUIRE(r == "999999999999999999999999999999999999999999999999998000000000000000000000000000000000000000000000000001");*/
}

TEST_CASE ( "Test exponents", "[VTmath]") {
  std::cout << "Testing exponents\n";

  VTmath m, n, r;

  m = 3;
  n = 6;
  r = m^n;
  REQUIRE(m == 3);
  REQUIRE(n == 6);
  REQUIRE(r == 729);

  m = 6;
  n = 3;
  r = m ^ n;
  REQUIRE(m == 6);
  REQUIRE(n == 3);
  REQUIRE(r == 216);

  /*m = 6023;
  n = 12;
  r = m ^ n;
  REQUIRE(m == 6023);
  REQUIRE(n == 12);
  REQUIRE(r == "2279052648992838508792485856578702584258764321");
*/
  m = -2;
  n = 5;
  r = m ^ n;
  REQUIRE(m == -2);
  REQUIRE(n == 5);
  REQUIRE(r == -32);

  m = 5;
  n = -2;
  r = m ^ n;
  REQUIRE(m == 5);
  REQUIRE(n == -2);
  REQUIRE(r == 0);

  /*m = 9494;
  n = 33;
  r = m ^ n;
  REQUIRE(m == 9494);
  REQUIRE(n == 33);
  REQUIRE(r == "180228929695623123738578762485262226134187333708071718504862359004025431971114571751340359362574505349118463634941091602383853584384");*/
}

// TO-DO: write more tests
